"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6058],{3074:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var o=n(5893),a=n(1151);const i={sidebar_position:3},r="Request validation",l={id:"validation",title:"Request validation",description:"Vovk.ts offers API that allows to validate request body and query string on back-end and, thanks to the metadata mechanism, performs zero-cost validation on client-side before request to the server is even made.",source:"@site/docs/validation.md",sourceDirName:".",slug:"/validation",permalink:"/docs/validation",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/validation.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Custom Decorators",permalink:"/docs/decorators"},next:{title:"Streaming",permalink:"/docs/streaming"}},s={},d=[{value:"vovk-zod",id:"vovk-zod",level:2},{value:"Creating a custom validation library",id:"creating-a-custom-validation-library",level:2},{value:"Disable client validation",id:"disable-client-validation",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"request-validation",children:"Request validation"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Vovk.ts"})," offers API that allows to validate request body and query string on back-end and, thanks to the metadata mechanism, performs zero-cost validation on client-side before request to the server is even made."]}),"\n",(0,o.jsx)(t.h2,{id:"vovk-zod",children:"vovk-zod"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"vovk-zod"})," is the library that implements ",(0,o.jsx)(t.a,{href:"https://zod.dev/",children:"Zod"})," validation. It performs validation on the Controller with ",(0,o.jsx)(t.code,{children:"ZodModel.parse"}),", ",(0,o.jsx)(t.a,{href:"https://www.npmjs.com/package/zod-to-json-schema",children:"converts the Zod object to a JSON Schema"})," that's stored at the metadata file, and runs validation on client before the request is made with ",(0,o.jsx)(t.a,{href:"https://ajv.js.org/",children:"Ajv"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"// /src/vovk/user/UserController.ts\n\n// ...\nexport default class UserController {\n    static controllerName = 'UserController';\n\n    static userService = UserService;\n\n    @put()\n    @vovkZod(UpdateUserModel, UpdateUserQueryModel)\n    static updateUser(\n        req: VovkRequest<z.infer<typeof UpdateUserModel>, z.infer<typeof UpdateUserQueryModel>>\n    ) {\n        const { name, email } = await req.json();\n        const id = req.nextUrl.searchParams.get('id');\n\n        return this.userService.updateUser(id, { name, email });\n    }\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["On the client-side validation is enabled with ",(0,o.jsx)(t.code,{children:"validateOnClient"})," option."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"import { zodValidateOnClient } from 'vovk-zod';\nimport type UserController from './UserController';\nimport metadata from '../vovk-metadata.json' assert { type: \"json\" };\n\nconst controller = clientizeController<typeof UserController>(metadata.UserController, {\n    validateOnClient: zodValidateOnClient,\n});\n\nexport function updateUser(id: string, { name, email }: { name: string; email: string }) {\n  // validates on client\n  return this.controller.updateUser({\n      query: { id },\n      body: { name, email },\n  });\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"creating-a-custom-validation-library",children:"Creating a custom validation library"}),"\n",(0,o.jsxs)(t.p,{children:["You can create a decorator that, first of all, validates request on the server-side and optionally populates controller metadata with validation information that is going to be used by ",(0,o.jsx)(t.code,{children:"fetcher"})," and ",(0,o.jsx)(t.code,{children:"streamFetcher"})," when they call ",(0,o.jsx)(t.code,{children:"validate"})," function."]}),"\n",(0,o.jsx)(t.p,{children:"The simplest example of the validation would be equality validation. It does nothing than checking if received query and body are equal to some definite object."}),"\n",(0,o.jsxs)(t.p,{children:["At the example below ",(0,o.jsx)(t.code,{children:"validateEquality"})," decorator is created with ",(0,o.jsx)(t.code,{children:"createDecorator"})," that accepts 2 arguments: server validation function and init function that uses ",(0,o.jsx)(t.code,{children:"clientValidators"})," object to indicate that validation information should be stored at metadata file."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"// /src/decorators/validateEquality.ts\nimport { isEqual } from 'lodash';\nimport { HttpException, HttpStatus, createDecorator, type VovkRequest } from 'vovk';\nimport type { VovkClientOptions } from 'vovk/client';\n\ntype BodyValidate = Record<string, unknown> | null;\ntype QueryValidate = Record<string, string> | null;\n\nconst validateEquality = createDecorator(\n  async (req: VovkRequest<unknown>, next, bodyValidate?: BodyValidate, queryValidate?: QueryValidate) => {\n    if (bodyValidate) {\n      const body = await req.json();\n\n      // override req.json to make it to be called again by controller code\n      req.json = () => Promise.resolve(body);\n\n      if (!isEqual(body, bodyValidate)) {\n        throw new HttpException(HttpStatus.BAD_REQUEST, 'Server exception. Invalid body');\n      }\n    }\n\n    if (queryValidate) {\n      const query = Object.fromEntries(req.nextUrl.searchParams.entries());\n\n      if (!isEqual(query, queryValidate)) {\n        throw new HttpException(HttpStatus.BAD_REQUEST, 'Server exception. Invalid query');\n      }\n    }\n\n    return next();\n  },\n  (bodyValidate?: BodyValidate, queryValidate?: QueryValidate) => ({\n    clientValidators: {\n      body: bodyValidate,\n      query: queryValidate,\n    },\n  })\n);\n\nexport const validateEqualityOnClient: VovkClientOptions['validateOnClient'] = (input, validators) => {\n  if (validators.body) {\n    if (!isEqual(input.body, validators.body)) {\n      throw new HttpException(HttpStatus.NULL, `Client exception. Invalid body`);\n    }\n  }\n\n  if (validators.query) {\n    if (!isEqual(input.query, validators.query)) {\n      throw new HttpException(HttpStatus.NULL, `Client exception. Invalid query`);\n    }\n  }\n};\n\nexport default validateEquality;\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Another exported variable is ",(0,o.jsx)(t.code,{children:"validateEqualityOnClient"})," that implements ",(0,o.jsx)(t.code,{children:"VovkClientOptions['validateOnClient']"})," type. It's role is to define how validation is performed on client-side. In other words ",(0,o.jsx)(t.code,{children:"validateEquality"})," is used as a controller decorator and ",(0,o.jsx)(t.code,{children:"validateEqualityOnClient"})," is used by ",(0,o.jsx)(t.code,{children:"clientizeController"})," as a ",(0,o.jsx)(t.code,{children:"validateOnClient"})," option. Also notice that ",(0,o.jsx)(t.code,{children:"validateEqualityOnClient"})," throws ",(0,o.jsx)(t.code,{children:"HttpException"})," with status 0 to simulate regular HTTP exceptions that can be caught by the client-side code."]}),"\n",(0,o.jsx)(t.p,{children:"Here is how the newly created decorator is used at controller."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"// /src/vovk/hello/HelloController.ts\nimport type { VovkRequest } from 'vovk';\nimport validateEquality from '../lib/validateEquality';\n\nexport default class HelloController {\n    static controllerName = 'HelloController';\n\n    @post.auto()\n    @validateEquality({ foo: 42 }, { bar: 'hello' })\n    static validatedRequest(req: VovkRequest<{ foo: 42 }, { bar: 'hello' }>) {\n        // ...\n    }\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["In your state file you need to import ",(0,o.jsx)(t.code,{children:"validateEqualityOnClient"})," and pass it to ",(0,o.jsx)(t.code,{children:"clientizeController"})," as an option."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"// /src/vovk/hello/HelloState.ts\nimport { clientizeController } from 'vovk/client';\nimport type HelloController from './HelloController';\nimport { validateEqualityOnClient } from '../../decorators/validateEquality';\nimport metadata from '../vovk-metadata.json' assert { type: 'json' };\n\ntype HelloControllerType = typeof HelloController;\n\nconst controller = clientizeController<HelloControllerType>(metadata.HelloController, {\n    validateOnClient: validateEqualityOnClient,\n    disableClientValidation: false, // optionally set to true to disable client validation \n});\n\nconst helloState = {\n    validatedRequest: async (hello: string, foo: string) => {\n        const result = await controller.validatedRequest({\n            body: { foo: 42 },\n            query: { bar: 'hello' },\n        });\n\n        return result;\n    }\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"validateOnClient"})," is going to be invoked on every request before data is sent to the server."]}),"\n",(0,o.jsx)(t.h2,{id:"disable-client-validation",children:"Disable client validation"}),"\n",(0,o.jsxs)(t.p,{children:["You can set ",(0,o.jsx)(t.code,{children:"disableClientValidation"})," option mentioned above to ",(0,o.jsx)(t.code,{children:"true"})," to disable client validation for debugging purposes. If you want to disable it completely and remove it from the metadata file (in case if you want to hide server-side validation implementation) you can use ",(0,o.jsx)(t.code,{children:"exposeValidation"})," option set to ",(0,o.jsx)(t.code,{children:"false"})," at the Next.js wildcard router level."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"// /src/api/[[...]]/route.ts\n// ...\nexport const { GET, POST, PATCH, PUT } = initVovk({\n    controllers: [/* ... */],\n    exposeValidation: false // don't populate metadata file with validation information\n    onMetadata: // ...\n});\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>r});var o=n(7294);const a={},i=o.createContext(a);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);