"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1997],{1103:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>a});var r=n(5893),s=n(1151);const o={sidebar_position:1},c="Service and Controler",i={id:"service-controller",title:"Service and Controler",description:"Back-end Service",source:"@site/docs/service-controller.md",sourceDirName:".",slug:"/service-controller",permalink:"/docs/service-controller",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/service-controller.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/docs/intro"},next:{title:"Client",permalink:"/docs/client"}},l={},a=[{value:"Back-end Service",id:"back-end-service",level:2},{value:"Controller",id:"controller",level:2},{value:"<code>HttpException</code> class and <code>HttpStatus</code> enum",id:"httpexception-class-and-httpstatus-enum",level:2},{value:"<code>VovkRequest</code> type",id:"vovkrequest-type",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"service-and-controler",children:"Service and Controler"}),"\n",(0,r.jsx)(t.h2,{id:"back-end-service",children:"Back-end Service"}),"\n",(0,r.jsx)(t.p,{children:'Back-end Service (or just "Service") is a static class that implements methods that perform DB requests or third-party calls. It can be used by Controllers and other Back-end Services. The methods can be retular functions or generators (incl. async generators) that are used for response streaming.'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// /src/vovk/hello/HelloService.ts\nexport default class HelloService {\n  static async getHello() {\n    return { greeting: 'Hello world!' };\n  }\n\n  static async *getTokens() {\n    // ...\n    yield { message: 'Hello' }\n  }\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["To inject one service to another use ",(0,r.jsx)(t.code,{children:"pricate static"})," prefix to assign the injected service."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// /src/vovk/hello/HelloService.ts\nimport ByeService from '../bye/ByeService';\n\nexport default class HelloService {\n  private static byeService = ByeService;\n\n  static async getBye() {\n    return this.byeService.getBye();\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"controller",children:"Controller"}),"\n",(0,r.jsxs)(t.p,{children:["Controller is a static class that handles incoming HTTP requests and uses Services. The Services can be injected with ",(0,r.jsx)(t.code,{children:"private static"})," static prefix."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// /src/vovk/hello/HelloController.ts\nimport { get, prefix } from \"vovk\";\nimport HelloService from \"./HelloService\"\n\n@prefix('hello')\nexport default class HelloController {\n    static controllerName = 'HelloController';\n    \n    private static helloService = HelloService;\n\n    /**\n     * Return a greeting from the HelloService\n     */\n    @get('greeting')\n    static async getHello() {\n        return this.helloService.getHello();\n    }\n}\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"@prefix"})," and ",(0,r.jsx)(t.code,{children:"@get"})," build API endpoint ",(0,r.jsx)(t.code,{children:"GET /api/hello/greeting"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"controllerName"})," is required to build ",(0,r.jsx)(t.strong,{children:"vovk-metadata.json"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"HelloService"})," is assigned as a ",(0,r.jsx)(t.code,{children:"private static"})," and called at the route handler ",(0,r.jsx)(t.code,{children:"getHello"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"All potential HTTP methods are supported."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"import { get, post, put, patch, del, head, options } from 'vovk';\n"})}),"\n",(0,r.jsxs)(t.p,{children:['Controllers can be "clientized" using ',(0,r.jsx)(t.code,{children:"clientizeController"})," to be used on the client-side. Please check Client documentation."]}),"\n",(0,r.jsxs)(t.h2,{id:"httpexception-class-and-httpstatus-enum",children:[(0,r.jsx)(t.code,{children:"HttpException"})," class and ",(0,r.jsx)(t.code,{children:"HttpStatus"})," enum"]}),"\n",(0,r.jsx)(t.p,{children:"HttpException accepts 2 arguments. The first one is an HTTP code that can be retrieved from HttpStatus, the other one is error text."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"import { HttpException, HttpStatus } from 'vovk';\n\n// ...\nthrow new HttpException(HttpStatus.BAD_REQUEST, 'Something went wrong');\n"})}),"\n",(0,r.jsxs)(t.h2,{id:"vovkrequest-type",children:[(0,r.jsx)(t.code,{children:"VovkRequest"})," type"]}),"\n",(0,r.jsxs)(t.p,{children:["Every route handler receives two arguments: request object and a record of parameters extracted from the route path. The request object defined as ",(0,r.jsx)(t.code,{children:"VovkRequest<BODY, QUERY>"})," is the standard ",(0,r.jsx)(t.code,{children:"NextRequest"})," object extended by body and query. It re-defines type of ",(0,r.jsx)(t.code,{children:"NextRequest['json']"})," and ",(0,r.jsx)(t.code,{children:"NextRequest['nextUrl']['searchParams']['get']"})," so you don't need to re-type body of ",(0,r.jsx)(t.code,{children:"any"})," type or search param of ",(0,r.jsx)(t.code,{children:"string | null"})," type."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// /src/vovk/post/PostController.ts\nimport { prefix, get, type VovkRequest } from 'vovk';\nimport { authGuard } from '../../decorators';\nimport PostService from './PostService';\nimport { PostId } from '../../types';\n\n@prefix('post')\nexport default class PostController {\n  private static postService = PostService;\n  \n  @put()\n  static updatePost(\n    req: VovkRequest<{ title: string; content: string; }, { id: PostId }>, \n  ) {\n    const { title, content } = req.json(); // { title: string; content: string; }\n    const id = req.nextUrl.searchParams.get('id'); // PostId\n    const search = req.nextUrl.searchParams.get('search'); // never\n\n    return this.postService.updatePost(id, title, content);\n  }\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["At the example above ",(0,r.jsx)(t.code,{children:"title"})," and ",(0,r.jsx)(t.code,{children:"content"})," are recognised as strings and ",(0,r.jsx)(t.code,{children:"id"})," param is recognised as ",(0,r.jsx)(t.code,{children:"PostId"}),". ",(0,r.jsx)(t.code,{children:"PostId"})," is an imaginary flavoured type defined like that:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// /src/types.ts\nexport type PostId = string & { __type: 'post' };\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>c});var r=n(7294);const s={},o=r.createContext(s);function c(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);