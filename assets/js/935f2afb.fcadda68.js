"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Getting Started","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"link","label":"Service and Controler","href":"/docs/service-controller","docId":"service-controller","unlisted":false},{"type":"link","label":"Client","href":"/docs/client","docId":"client","unlisted":false},{"type":"link","label":"Custom Decorators","href":"/docs/decorators","docId":"decorators","unlisted":false},{"type":"link","label":"Request Validation","href":"/docs/validation","docId":"validation","unlisted":false},{"type":"link","label":"Streaming","href":"/docs/streaming","docId":"streaming","unlisted":false},{"type":"link","label":"Worker Service","href":"/docs/worker","docId":"worker","unlisted":false},{"type":"link","label":"The Vovk Pattern","href":"/docs/vovk-pattern","docId":"vovk-pattern","unlisted":false},{"type":"link","label":"API Reference","href":"/docs/api","docId":"api","unlisted":false},{"type":"link","label":"Roadmap","href":"/docs/roadmap","docId":"roadmap","unlisted":false},{"type":"link","label":"Sponsor","href":"/docs/sponsor","docId":"sponsor","unlisted":false}]},"docs":{"api":{"id":"api","title":"API Reference","description":"Full list of available exports:","sidebar":"tutorialSidebar"},"client":{"id":"client","title":"Client","description":"vovk/client module exports utilities that turn controllers in a well-typed TypeScript library. It recognises types imported with import type from controllers and generates a fetching library that implements the same methods that are implemented by controllers.","sidebar":"tutorialSidebar"},"decorators":{"id":"decorators","title":"Custom Decorators","description":"Overview","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Getting Started","description":"Quick install","sidebar":"tutorialSidebar"},"roadmap":{"id":"roadmap","title":"Roadmap","description":"Framework","sidebar":"tutorialSidebar"},"service-controller":{"id":"service-controller","title":"Service and Controler","description":"Back-end Service","sidebar":"tutorialSidebar"},"sponsor":{"id":"sponsor","title":"Sponsor","description":"","sidebar":"tutorialSidebar"},"streaming":{"id":"streaming","title":"Streaming","description":"Generators","sidebar":"tutorialSidebar"},"validation":{"id":"validation","title":"Request Validation","description":"Vovk.ts offers API that allows to validate request body and query string on back-end and, thanks to the metadata mechanism, performs zero-cost validation on client-side before request to the server is even made.","sidebar":"tutorialSidebar"},"vovk-pattern":{"id":"vovk-pattern","title":"The Vovk Pattern","description":"Vovk.ts combines back-end and front-end code into one code base. The logical parts of the app are split into folders given them corresponding name. The folders are split into \\"things\\" such as user, post, comment, app settings, auth features etc. Besically \\"a thing\\" can belong to 2 categories:","sidebar":"tutorialSidebar"},"worker":{"id":"worker","title":"Worker Service","description":"vovk/worker module is intended to popularise Web Worker usage in your every day work. The standard Web Workers are awesome but they require to write additional code by using onmessage handler on both sides (main thread and Woker thread) and exchange data using postMessage. Vovk Worker Service applies the same principle that is used at clientizeController and builds main-thread client-side library using metadata and worker type. It uses built-in browser API aush as addEventListener and postMessage and does not call eval or Function constructor.","sidebar":"tutorialSidebar"}}}')}}]);